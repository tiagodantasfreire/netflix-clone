[{"C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\App.js":"1","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\index.js":"2","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\Tmdb.js":"3","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\MovieRow.js":"4","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\FeaturedMovie.js":"5","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\Header.js":"6"},{"size":2684,"mtime":1609197269196,"results":"7","hashOfConfig":"8"},{"size":196,"mtime":1608679235879,"results":"9","hashOfConfig":"8"},{"size":3246,"mtime":1609024700847,"results":"10","hashOfConfig":"8"},{"size":2033,"mtime":1609196800290,"results":"11","hashOfConfig":"8"},{"size":1868,"mtime":1609198523106,"results":"12","hashOfConfig":"8"},{"size":695,"mtime":1609191764440,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"pasit5",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\App.js",["31"],"import React, { useEffect, useState } from 'react'; // useState salva a lista de filmes\r\nimport Tmdb from './Tmdb';\r\nimport MovieRow from './components/MovieRow'\r\nimport './App.css'\r\nimport FeaturedMovie from './components/FeaturedMovie'\r\nimport Header from './components/Header'\r\n\r\nexport default () => {\r\n\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [featuredData, setFeaturedData] = useState(null)\r\n    const [blackHeader, setBlackHeader] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        //Quando a tela for carregada será executada essa função\r\n        const loadAll = async () => {\r\n            // Pega a lista total\r\n            let list = await Tmdb.getHomeList();\r\n            setMovieList(list);\r\n\r\n            //Pega o filme em destaque (fetured)\r\n            let originals = list.filter(i=>i.slug === 'originais');\r\n            let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\r\n            let chosen = originals[0].items.results[randomChosen];\r\n            let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\r\n\r\n            setFeaturedData(chosenInfo)\r\n        }\r\n\r\n        loadAll();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const scrollListener = () => {\r\n            if (window.scrollY > 10) {\r\n                setBlackHeader(true)\r\n            }else{\r\n                setBlackHeader(false)\r\n            }\r\n        }\r\n\r\n        window.addEventListener('scroll', scrollListener)\r\n        return () => {\r\n            window.removeEventListener('scroll', scrollListener)\r\n        }\r\n    }, []);\r\n\r\n\r\n    // Aqui é onde a página é gerada\r\n    return(\r\n        <div className=\"page\">\r\n\r\n            <Header black={blackHeader} />\r\n            \r\n            {featuredData &&\r\n                <FeaturedMovie item={featuredData} />\r\n            }\r\n\r\n            <section className=\"lists\">\r\n                {/* Função que retorna as listas */}\r\n                {movieList.map((item, key) => ( // só utiliza o key quando é um loop\r\n                    <MovieRow key={key} title={item.title} items={item.items}/> // componente que retorna as listas\r\n                ))}\r\n            </section>\r\n\r\n            <footer>\r\n                Feito por Tiago Dantas <br/>\r\n                Direitos de imagem à Netflix <br/>\r\n                Dados fornecidos pelo site themoviedb.org\r\n            </footer>\r\n                    \r\n            {movieList.length <= 0 && \r\n            <div className=\"loading\">\r\n                <img src=\"https://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/netflix-loading.gif\" alt=\"Carregando\"/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\index.js",[],["32","33"],"C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\Tmdb.js",["34","35"],"const API_KEY = '0424781ff8e683a7bc83a0925d402e0b'; // Chave da API\r\nconst API_BASE = 'https://api.themoviedb.org/3'; // Endereço para as requisições\r\n\r\n// Função que busca os dados\r\nconst basicFetch = async (endpoint) => {\r\n    \r\n    const req = await fetch(`${API_BASE}${endpoint}`)\r\n    const json = await req.json(); // pega o json da requisição\r\n    return json; // retorna o resultado\r\n\r\n    // async e await retornam uma promise\r\n    // await espera o resultado da promise para executar a próxima linha\r\n}\r\n\r\nexport default {\r\n    // função que retorna os dados da Home\r\n    getHomeList: async () => {\r\n        return [\r\n            {   \r\n                // retorna series e filmes originais da netlfix\r\n                slug: 'originais',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {   \r\n                // retorna as séries e filmes em alta da semana \r\n                slug: 'trending',\r\n                title: 'Recomendados',\r\n                items: await basicFetch(`/trending/all/week?language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {   \r\n                // retorna os filmes em alta\r\n                slug: 'top rated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {\r\n                // retorna filmes de ação\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {   \r\n                // retorna filmes de comédia\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {\r\n                // retorna filmes de terror\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {\r\n                // retorna filmes de romance\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-br&api_key=${API_KEY}`) \r\n            },\r\n            {\r\n                // retorna documentários\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-br&api_key=${API_KEY}`) \r\n            }\r\n        ]\r\n    },\r\n\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if(movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-br&api_key=${API_KEY}`)\r\n                break;\r\n\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-br&api_key=${API_KEY}`)\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info\r\n    }\r\n}\r\n","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\MovieRow.js",["36"],"import React, { useState } from 'react';\r\nimport './MovieRow.css'\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(0)\r\n\r\n    // Rolagem das listas\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2); // Rola a lista de acordo com a metade da tela do usuario\r\n        if(x > 0){\r\n            x = 0\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRigthArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2); // Rola a lista de acordo com a metade da tela do usuario\r\n        let listW = items.results.length * 150\r\n        if((window.innerWidth - listW) > x){ // Tamanho da Tela - Tamanho da lista\r\n            x = (window.innerWidth - listW) - 60 // X = Tamanho da Tela - Tamanho da lista - Padding \r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    return (\r\n        <div className=\"movierow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movierow--left\">\r\n                <NavigateBeforeIcon style={{fontSize: 50}} onClick={handleLeftArrow}/>\r\n            </div>\r\n            <div className=\"movierow--right\">\r\n                <NavigateNextIcon style={{fontSize: 50}} onClick={handleRigthArrow}/>\r\n            </div>\r\n\r\n            <div className=\"movierow--listarea\">\r\n                <div className=\"movierow--list\" style={{\r\n                marginLeft: scrollX,\r\n                width: items.results.length * 150\r\n                }\r\n                }>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movierow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            \r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\FeaturedMovie.js",["37"],"C:\\Users\\Eduardo\\Desktop\\Tiago\\Programação\\netflix-clone\\src\\components\\Header.js",["38"],"import React from 'react'\r\nimport './Header.css'\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/640px-Netflix_2015_logo.svg.png\" alt=\"Netflix\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Usuário\"/>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}",{"ruleId":"39","severity":1,"message":"40","line":8,"column":1,"nodeType":"41","endLine":80,"endColumn":2},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"39","severity":1,"message":"46","line":15,"column":1,"nodeType":"41","endLine":87,"endColumn":2},{"ruleId":"47","severity":1,"message":"48","line":74,"column":13,"nodeType":"49","messageId":"50","endLine":82,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":6,"column":1,"nodeType":"41","endLine":53,"endColumn":2},{"ruleId":"39","severity":1,"message":"40","line":4,"column":1,"nodeType":"41","endLine":44,"endColumn":2},{"ruleId":"39","severity":1,"message":"40","line":4,"column":1,"nodeType":"41","endLine":19,"endColumn":2},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"Assign object to a variable before exporting as module default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]